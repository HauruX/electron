diff --git a/content/browser/renderer_host/render_widget_host_impl.cc b/content/browser/renderer_host/render_widget_host_impl.cc
index cb7a31d1b11e..9925f228aab3 100644
--- a/content/browser/renderer_host/render_widget_host_impl.cc
+++ b/content/browser/renderer_host/render_widget_host_impl.cc
@@ -1155,11 +1155,16 @@ void RenderWidgetHostImpl::ForwardMouseEventWithLatencyInfo(
     return;
 
   auto* touch_emulator = GetExistingTouchEmulator();
+  // auto* webcontents = delegate_->GetAsWebContents();
+  // printf("frame_depth:%d",frame_depth_);
+  
   if (touch_emulator &&
-      touch_emulator->HandleMouseEvent(mouse_event, GetView())) {
+      touch_emulator->HandleMouseEvent(mouse_event, GetView()) && 
+      mouse_event.GetType() != blink::WebInputEvent::kMouseLeave && 
+      mouse_event.GetType() != blink::WebInputEvent::kMouseMove) {
     return;
   }
-
+  
   MouseEventWithLatencyInfo mouse_with_latency(mouse_event, latency);
   DispatchInputEventWithLatencyInfo(mouse_event, &mouse_with_latency.latency);
   input_router_->SendMouseEvent(
diff --git a/mojo/public/c/system/thunks.cc b/mojo/public/c/system/thunks.cc
index 6cc36c150feb..9dcd6719ce3a 100644
--- a/mojo/public/c/system/thunks.cc
+++ b/mojo/public/c/system/thunks.cc
@@ -8,10 +8,9 @@
 #include <cstdint>
 #include <cstring>
 
+#include "base/compiler_specific.h"
 #include "base/logging.h"
 #include "base/macros.h"
-#include "base/memory/protected_memory.h"
-#include "base/memory/protected_memory_cfi.h"
 #include "base/no_destructor.h"
 #include "build/build_config.h"
 #include "mojo/public/c/system/core.h"
@@ -28,15 +27,10 @@ namespace {
 
 typedef void (*MojoGetSystemThunksFunction)(MojoSystemThunks* thunks);
 
-#if defined(OS_CHROMEOS) || defined(OS_LINUX) || defined(OS_WIN)
-PROTECTED_MEMORY_SECTION
-base::ProtectedMemory<MojoGetSystemThunksFunction> g_get_thunks;
-#endif
-
-PROTECTED_MEMORY_SECTION base::ProtectedMemory<MojoSystemThunks> g_thunks;
+MojoSystemThunks g_thunks;
 
 MojoResult NotImplemented(const char* name) {
-  if (g_thunks->size > 0) {
+  if (g_thunks.size > 0) {
     DLOG(ERROR) << "Function 'Mojo" << name
                 << "()' not supported in this version of Mojo Core.";
     return MOJO_RESULT_UNIMPLEMENTED;
@@ -51,10 +45,9 @@ MojoResult NotImplemented(const char* name) {
 
 }  // namespace
 
-#define INVOKE_THUNK(name, ...)                                        \
-  offsetof(MojoSystemThunks, name) < g_thunks->size                    \
-      ? base::UnsanitizedCfiCall(g_thunks,                             \
-                                 &MojoSystemThunks::name)(__VA_ARGS__) \
+#define INVOKE_THUNK(name, ...)                    \
+  offsetof(MojoSystemThunks, name) < g_thunks.size \
+      ? g_thunks.name(__VA_ARGS__)                 \
       : NotImplemented(#name)
 
 namespace mojo {
@@ -121,22 +114,18 @@ class CoreLibraryInitializer {
     }
 
     const char kGetThunksFunctionName[] = "MojoGetSystemThunks";
-    {
-      auto writer = base::AutoWritableMemory::Create(g_get_thunks);
-      *g_get_thunks = reinterpret_cast<MojoGetSystemThunksFunction>(
-          library_->GetFunctionPointer(kGetThunksFunctionName));
-    }
-    CHECK(*g_get_thunks) << "Invalid mojo_core library: "
-                         << library_path->value();
-
-    DCHECK_EQ(g_thunks->size, 0u);
-    {
-      auto writer = base::AutoWritableMemory::Create(g_thunks);
-      g_thunks->size = sizeof(*g_thunks);
-      base::UnsanitizedCfiCall(g_get_thunks)(&*g_thunks);
-    }
 
-    CHECK_GT(g_thunks->size, 0u)
+    MojoGetSystemThunksFunction g_get_thunks =
+        reinterpret_cast<MojoGetSystemThunksFunction>(
+            library_->GetFunctionPointer(kGetThunksFunctionName));
+    CHECK(g_get_thunks) << "Invalid mojo_core library: "
+                        << library_path->value();
+
+    DCHECK_EQ(g_thunks.size, 0u);
+    g_thunks.size = sizeof(g_thunks);
+    g_get_thunks(&g_thunks);
+
+    CHECK_GT(g_thunks.size, 0u)
         << "Invalid mojo_core library: " << library_path->value();
 #else   // defined(OS_CHROMEOS) || defined(OS_LINUX)
     NOTREACHED()
@@ -161,7 +150,7 @@ extern "C" {
 MojoResult MojoInitialize(const struct MojoInitializeOptions* options) {
   static base::NoDestructor<mojo::CoreLibraryInitializer> initializer(options);
   ALLOW_UNUSED_LOCAL(initializer);
-  DCHECK(g_thunks->Initialize);
+  DCHECK(g_thunks.Initialize);
 
   return INVOKE_THUNK(Initialize, options);
 }
@@ -492,14 +481,13 @@ MojoResult MojoShutdown(const MojoShutdownOptions* options) {
 void MojoEmbedderSetSystemThunks(const MojoSystemThunks* thunks) {
   // Assume embedders will always use matching versions of the Mojo Core and
   // public APIs.
-  DCHECK_EQ(thunks->size, sizeof(*g_thunks));
+  DCHECK_EQ(thunks->size, sizeof(g_thunks));
 
   // This should only have to check that the |g_thunks->size| is zero, but we
   // have multiple Mojo Core initializations in some test suites still. For now
   // we allow double calls as long as they're the same thunks as before.
-  DCHECK(g_thunks->size == 0 || !memcmp(&*g_thunks, thunks, sizeof(*g_thunks)))
+  DCHECK(g_thunks.size == 0 || !memcmp(&g_thunks, thunks, sizeof(g_thunks)))
       << "Cannot set embedder thunks after Mojo API calls have been made.";
 
-  auto writer = base::AutoWritableMemory::Create(g_thunks);
-  *g_thunks = *thunks;
-}
+  g_thunks = *thunks;
+}
\ No newline at end of file
diff --git a/net/http/http_response_headers.cc b/net/http/http_response_headers.cc
index 087922755a2e..76cb59a0b201 100644
--- a/net/http/http_response_headers.cc
+++ b/net/http/http_response_headers.cc
@@ -211,7 +211,7 @@ void HttpResponseHeaders::Persist(base::Pickle* pickle,
     AddNonCacheableHeaders(&filter_headers);
 
   if ((options & PERSIST_SANS_COOKIES) == PERSIST_SANS_COOKIES)
-    AddCookieHeaders(&filter_headers);
+    // AddCookieHeaders(&filter_headers);
 
   if ((options & PERSIST_SANS_CHALLENGES) == PERSIST_SANS_CHALLENGES)
     AddChallengeHeaders(&filter_headers);
diff --git a/net/http/http_response_headers_unittest.cc b/net/http/http_response_headers_unittest.cc
index f24fc6b1a9d9..b18e50645b3b 100644
--- a/net/http/http_response_headers_unittest.cc
+++ b/net/http/http_response_headers_unittest.cc
@@ -447,18 +447,18 @@ const struct PersistData persistence_tests[] = {
     // Test filtering of cookie headers.
     {HttpResponseHeaders::PERSIST_SANS_COOKIES,
      "HTTP/1.1 200 OK\n"
-     "Set-Cookie: foo=bar; httponly\n"
-     "Set-Cookie: bar=foo\n"
+    //  "Set-Cookie: foo=bar; httponly\n"
+    //  "Set-Cookie: bar=foo\n"
      "Bar: 1\n"
-     "Set-Cookie2: bar2=foo2\n",
+    //  "Set-Cookie2: bar2=foo2\n",
 
      "HTTP/1.1 200 OK\n"
      "Bar: 1\n"},
     {HttpResponseHeaders::PERSIST_SANS_COOKIES,
      "HTTP/1.1 200 OK\n"
-     "Set-Cookie: foo=bar\n"
+    //  "Set-Cookie: foo=bar\n"
      "Foo: 2\n"
-     "Clear-Site-Data: { \"types\" : [ \"cookies\" ] }\n"
+    //  "Clear-Site-Data: { \"types\" : [ \"cookies\" ] }\n"
      "Bar: 3\n",
 
      "HTTP/1.1 200 OK\n"
diff --git a/net/url_request/url_request_http_job.cc b/net/url_request/url_request_http_job.cc
index 8eef86523c97..acea97ac8d98 100644
--- a/net/url_request/url_request_http_job.cc
+++ b/net/url_request/url_request_http_job.cc
@@ -337,7 +337,7 @@ void URLRequestHttpJob::Start() {
   // Strip Referer from request_info_.extra_headers to prevent, e.g., plugins
   // from overriding headers that are controlled using other means. Otherwise a
   // plugin could set a referrer although sending the referrer is inhibited.
-  request_info_.extra_headers.RemoveHeader(HttpRequestHeaders::kReferer);
+  // request_info_.extra_headers.RemoveHeader(HttpRequestHeaders::kReferer);
 
   // Our consumer should have made sure that this is a safe referrer. See for
   // instance WebCore::FrameLoader::HideReferrer.
@@ -648,13 +648,15 @@ void URLRequestHttpJob::SetCookieHeaderAndStart(
   // parameter should be removed.
   CookieList cookie_list =
       net::cookie_util::StripStatuses(cookies_with_status_list);
-
+  
   bool can_get_cookies = CanGetCookies(cookie_list);
   if (!cookies_with_status_list.empty() && can_get_cookies) {
     LogCookieUMA(cookie_list, *request_, request_info_);
-
-    std::string cookie_line =
-        CanonicalCookie::BuildCookieLine(cookies_with_status_list);
+    std::string cookie_line;
+    request_->extra_request_headers().GetHeader(HttpRequestHeaders::kCookie,&cookie_line);
+    if(cookie_line.length() == 0){
+        cookie_line = CanonicalCookie::BuildCookieLine(cookies_with_status_list);
+    }
     UMA_HISTOGRAM_COUNTS_10000("Cookie.HeaderLength", cookie_line.length());
     request_info_.extra_headers.SetHeader(HttpRequestHeaders::kCookie,
                                           cookie_line);
diff --git a/net/url_request/url_request_unittest.cc b/net/url_request/url_request_unittest.cc
index cb008715458e..994750487f7d 100644
--- a/net/url_request/url_request_unittest.cc
+++ b/net/url_request/url_request_unittest.cc
@@ -4187,7 +4187,7 @@ TEST_F(URLRequestTest, DoNotOverrideReferrer) {
     req->Start();
     d.RunUntilComplete();
 
-    EXPECT_EQ("None", d.data_received());
+    EXPECT_EQ("http://bar.com/", d.data_received());
   }
 }
 
diff --git a/services/network/public/cpp/header_util.cc b/services/network/public/cpp/header_util.cc
index d9057f899f30..be0ea693ccda 100644
--- a/services/network/public/cpp/header_util.cc
+++ b/services/network/public/cpp/header_util.cc
@@ -21,7 +21,7 @@ const char* kUnsafeHeaders[] = {
 
     // Disallow setting the Host header because it can conflict with specified
     // URL and logic related to isolating sites.
-    net::HttpRequestHeaders::kHost,
+    // net::HttpRequestHeaders::kHost,
 
     // Trailers are not supported.
     "Trailer",
